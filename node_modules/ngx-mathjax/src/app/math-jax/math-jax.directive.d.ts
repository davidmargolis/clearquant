import { AfterViewInit, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { MathJaxService } from './math-jax.service';
/**
 * Typeset the content or expressions using MathJax library.
 */
import * as ɵngcc0 from '@angular/core';
export declare class MathJaxDirective implements AfterViewInit, OnChanges, OnDestroy {
    /**
     * An array of input MathJax expressions.
     */
    MathJaxExpressions: string[];
    private readonly mathJaxHub$;
    /**
     * The associated native element.
     */
    private readonly element;
    /**
     * Observes the change of the input expression.
     */
    private expressionChangeSubject;
    /**
     * Observes the completion of the initial MathJax typesetting.
     */
    private readonly mathJaxTypesetSubject;
    private readonly expressionChangeSubscription;
    /**
     * Observe the readiness of all the Jax instances in the element.
     */
    private readonly allJax$;
    private readonly typesetSubscription;
    private hubSubscription;
    private isDestroying;
    constructor(el: ElementRef, service: MathJaxService);
    ngAfterViewInit(): void;
    /**
     * Explicitly trigger the MathJax typeset process.
     *
     * This is useful if the content is loaded dynamically.
     */
    MathJaxTypeset(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MathJaxDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MathJaxDirective, "mathjax, [mathjax]", never, { "MathJaxExpressions": "mathjax"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC1qYXguZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm1hdGgtamF4LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRoSmF4U2VydmljZSB9IGZyb20gJy4vbWF0aC1qYXguc2VydmljZSc7XG4vKipcbiAqIFR5cGVzZXQgdGhlIGNvbnRlbnQgb3IgZXhwcmVzc2lvbnMgdXNpbmcgTWF0aEpheCBsaWJyYXJ5LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXRoSmF4RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGlucHV0IE1hdGhKYXggZXhwcmVzc2lvbnMuXG4gICAgICovXG4gICAgTWF0aEpheEV4cHJlc3Npb25zOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hdGhKYXhIdWIkO1xuICAgIC8qKlxuICAgICAqIFRoZSBhc3NvY2lhdGVkIG5hdGl2ZSBlbGVtZW50LlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGUgY2hhbmdlIG9mIHRoZSBpbnB1dCBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHByaXZhdGUgZXhwcmVzc2lvbkNoYW5nZVN1YmplY3Q7XG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZXMgdGhlIGNvbXBsZXRpb24gb2YgdGhlIGluaXRpYWwgTWF0aEpheCB0eXBlc2V0dGluZy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hdGhKYXhUeXBlc2V0U3ViamVjdDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4cHJlc3Npb25DaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZSB0aGUgcmVhZGluZXNzIG9mIGFsbCB0aGUgSmF4IGluc3RhbmNlcyBpbiB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGFsbEpheCQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0eXBlc2V0U3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgaHViU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgaXNEZXN0cm95aW5nO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBzZXJ2aWNlOiBNYXRoSmF4U2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXhwbGljaXRseSB0cmlnZ2VyIHRoZSBNYXRoSmF4IHR5cGVzZXQgcHJvY2Vzcy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBjb250ZW50IGlzIGxvYWRlZCBkeW5hbWljYWxseS5cbiAgICAgKi9cbiAgICBNYXRoSmF4VHlwZXNldCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=