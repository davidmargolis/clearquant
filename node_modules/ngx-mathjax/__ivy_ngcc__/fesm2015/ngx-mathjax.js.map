{"version":3,"file":"ngx-mathjax.js","sources":["ng:/ngx-mathjax/src/app/math-jax/math-jax.service.ts","ng:/ngx-mathjax/src/app/math-jax/math-jax.directive.ts","ng:/ngx-mathjax/src/app/math-jax/math-jax.module.ts"],"names":["tslib_1.__decorate"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ReplaySubject, Subject } from 'rxjs';\n\n/**\n * Defines global variables on the `window` object.\n */\ndeclare global {\n  interface Window {\n    /**\n     * Subject to notify the readiness of the MathJax namespace.\n     */\n    mathJaxHub$: Subject<any>;\n  }\n}\n\n/**\n * A internal utility service.\n */\n@Injectable()\nexport class MathJaxService {\n\n  /**\n   * Signals when the MathJax object is ready.\n   */\n  public readonly MathJaxHub$ = new ReplaySubject<any>();\n\n  /**\n   * Must call `init` method explicitly during module initialization.\n   */\n  public init(): void {\n    /**\n     * Create a global variable.\n     */\n    window.mathJaxHub$ = this.MathJaxHub$;\n\n  }\n\n}\n","/**\n * @author davidshen84\n */\nimport { UpdateValue } from './domain/interfaces';\nimport { AfterViewInit, Directive, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { MathJaxService } from './math-jax.service';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Typeset the content or expressions using MathJax library.\n */\n@Directive({\n  selector: 'mathjax, [mathjax]'\n})\nexport class MathJaxDirective implements AfterViewInit, OnChanges, OnDestroy {\n  /**\n   * An array of input MathJax expressions.\n   */\n  @Input('mathjax')\n  public MathJaxExpressions: string[];\n  private readonly mathJaxHub$: Observable<any>;\n  /**\n   * The associated native element.\n   */\n  private readonly element: HTMLElement;\n  /**\n   * Observes the change of the input expression.\n   */\n  private expressionChangeSubject = new ReplaySubject<UpdateValue<string>[]>();\n  /**\n   * Observes the completion of the initial MathJax typesetting.\n   */\n  private readonly mathJaxTypesetSubject = new Subject<any>();\n  private readonly expressionChangeSubscription: Subscription;\n  /**\n   * Observe the readiness of all the Jax instances in the element.\n   */\n  private readonly allJax$: Observable<any[]>;\n  private readonly typesetSubscription: Subscription;\n  private hubSubscription: Subscription;\n  private isDestroying: boolean;\n\n  constructor(el: ElementRef, service: MathJaxService) {\n    this.mathJaxHub$ = service.MathJaxHub$;\n    this.element = el.nativeElement;\n\n    this.typesetSubscription = combineLatest([this.mathJaxHub$, this.mathJaxTypesetSubject])\n      .subscribe(() => {\n        MathJax.Hub.Queue(['Typeset', MathJax.Hub, this.element]);\n      });\n\n    this.allJax$ = combineLatest([this.mathJaxHub$, this.mathJaxTypesetSubject]).pipe(\n      map(() => MathJax.Hub.getAllJax(this.element))\n    );\n\n    this.expressionChangeSubscription = combineLatest([this.allJax$, this.expressionChangeSubject])\n      .subscribe(([jax, updateValue]) =>\n        updateValue.forEach(v => MathJax.Hub.Queue(() => {\n          // Stop pushing messages to the queue when the component is being destroyed.\n          if (!this.isDestroying) {\n            return jax[v.order].Text(v.value);\n          }\n        })));\n  }\n\n  ngAfterViewInit(): void {\n    this.hubSubscription = this.mathJaxHub$\n      .subscribe(() => {\n        MathJax.Hub.Queue(['Typeset', MathJax.Hub, this.element]);\n        MathJax.Hub.Queue(['MathJaxTypeset', this]);\n      });\n  }\n\n  /**\n   * Explicitly trigger the MathJax typeset process.\n   *\n   * This is useful if the content is loaded dynamically.\n   */\n  MathJaxTypeset(): void {\n    this.mathJaxTypesetSubject.next();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const expressions = changes.MathJaxExpressions;\n\n    // Shortcut if there's nothing to update.\n    if (!(expressions.currentValue instanceof Array)) {\n      return;\n    }\n\n    // Update only the changed expressions.\n    const updateValues: UpdateValue<string>[] = expressions.currentValue\n      .map((cv, i) =>\n        (expressions.previousValue ? expressions.previousValue[i] !== cv : true) ?\n          {\n            value: expressions.currentValue[i],\n            order: i\n          }\n          : undefined)\n      .filter(v => v);\n    this.expressionChangeSubject.next(updateValues);\n  }\n\n  ngOnDestroy(): void {\n    this.isDestroying = true;\n\n    this.expressionChangeSubscription.unsubscribe();\n    this.hubSubscription.unsubscribe();\n    this.typesetSubscription.unsubscribe();\n\n    this.mathJaxTypesetSubject.complete();\n    this.expressionChangeSubject.complete();\n  }\n}\n","/**\n * @author davidshen84\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MathJaxDirective } from './math-jax.directive';\nimport { MathJaxService } from './math-jax.service';\n\n\n/**\n * Module configuration class.\n *\n * @example\n *\n * {\n *   version: '2.7.5',\n *   config: 'TeX-AMS_HTML',\n *   hostname: 'cdnjs.cloudflare.com'\n * }\n */\nexport class ModuleConfiguration {\n  /**\n   * The version of the MathJax library.\n   */\n  version: string;\n\n  /**\n   * The config name of the MathJax library.\n   * Please check the MathJax [documentation](https://docs.mathjax.org/en/latest/config-files.html) for all the configuration names.\n   */\n  config: string;\n\n  /**\n   * MathJax CDN hostname. Please check [here](https://docs.mathjax.org/en/latest/start.html#mathjax-cdn) for available CDN servers.\n   */\n  hostname: string;\n}\n\n/**\n * Module to load and configure the MathJax library.\n *\n * @example\n *\n * MathJaxModule.config(\n * {\n *     version: '2.7.5',\n *     config: 'TeX-AMS_HTML',\n *     hostname: 'cdnjs.cloudflare.com'\n * })\n */\n@NgModule({\n  declarations: [MathJaxDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [MathJaxDirective]\n})\nexport class MathJaxModule {\n\n  constructor(service: MathJaxService, moduleConfig?: ModuleConfiguration) {\n    service.init();\n\n    /**\n     * Define the **function string** to be inserted into the mathjax configuration script block.\n     */\n    const mathJaxHubConfig = (() => {\n      MathJax.Hub.Config({\n        skipStartupTypeset: true,\n        messageStyle: 'none',\n        tex2jax: {preview: 'none'}\n      });\n      MathJax.Hub.Register.StartupHook('End', () => {\n        window.mathJaxHub$.next();\n        window.mathJaxHub$.complete();\n      });\n    }).toString();\n\n    if (moduleConfig) {\n      /**\n       * Insert the MathJax configuration script into the Head element.\n       */\n      (function () {\n        const script = document.createElement('script') as HTMLScriptElement;\n        script.type = 'text/x-mathjax-config';\n        script.text = `(${mathJaxHubConfig})();`;\n        document.getElementsByTagName('head')[0].appendChild(script);\n      })();\n\n      /**\n       * Insert the script block to load the MathJax library.\n       */\n      (function (version: string, config: string, hostname: string) {\n        const script = document.createElement('script') as HTMLScriptElement;\n        script.type = 'text/javascript';\n        script.src = `https://${hostname}/ajax/libs/mathjax/${version}/MathJax.js?config=${config}`;\n        script.async = true;\n        document.getElementsByTagName('head')[0].appendChild(script);\n      })(moduleConfig.version, moduleConfig.config, moduleConfig.hostname);\n    }\n  }\n\n  /**\n   * Configure the provider for hte module.\n   *\n   * @deprecated Use forRoot or forChild method instead.\n   * @param forRoot Make sure it is set to `true` for the root module and `false` for any child module.\n   * @param moduleConfiguration A {ModuleConfiguration} instance.\n   */\n  public static config(forRoot: boolean = true, moduleConfiguration: ModuleConfiguration = {\n    version: '2.7.5',\n    config: 'TeX-AMS_HTML',\n    hostname: 'cdnjs.cloudflare.com'\n  }): ModuleWithProviders<MathJaxModule> {\n    return forRoot ? {\n      ngModule: MathJaxModule,\n      providers: [\n        {provide: ModuleConfiguration, useValue: moduleConfiguration},\n        {provide: MathJaxService, useClass: MathJaxService},\n      ]\n    } : {\n      ngModule: MathJaxModule\n    };\n  }\n\n  /**\n   * Configure the module for the root module.\n   *\n   * @param moduleConfiguration A {ModuleConfiguration} instance.\n   */\n  public static forRoot(moduleConfiguration: ModuleConfiguration = {\n    version: '2.7.5',\n    config: 'TeX-AMS_HTML',\n    hostname: 'cdnjs.cloudflare.com'\n  }): ModuleWithProviders<MathJaxModule> {\n    return {\n      ngModule: MathJaxModule,\n      providers: [\n        {provide: ModuleConfiguration, useValue: moduleConfiguration},\n        {provide: MathJaxService, useClass: MathJaxService},\n      ]\n    };\n  }\n\n  /**\n   * Configure the module for a child module.\n   */\n  public static forChild() {\n    return {\n      ngModule: MathJaxModule\n    };\n  }\n}\n"]}